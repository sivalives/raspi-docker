version: '3.5'
services:
  spunk-uf:
    image: sivalives/splunk-uf
    tty: true
    container_name: splunk-uf
    restart: always
    build:
      context: ../splunkforwarder
      args:
        SPKPASS: ${SPKPASS} #From.enf file
      dockerfile: Dockerfile
    ports:
      - 8089:8089
      - 9997:9997
    networks:
      - mynetwork
    volumes:
      - opt-splunk-etc:/opt/splunkforwarder/etc
      - opt-splunk-var:/opt/splunkforwarder/var
  
  mongo:
    build:
      context: ../mongo
      dockerfile: Dockerfile
    container_name: mongod
    restart: always
    command: sh -c "/usr/local/bin/init-mongo.sh"
    ports:
      - 27017:27017
    networks:
      - mynetwork
    volumes:
      - mongo-data:/data/db
      - ../mongo/mongodb.conf:/etc/mongodb.conf
    tty: true
    environment:
      - MONGO_INIT_DATABASE=${MONGO_INIT_DATABASE}
      - MONGO_ADMIN_USERNAME=${MONGO_ADMIN_USERNAME}
      - MONGO_ADMIN_PASSWORD=${MONGO_ADMIN_PASSWORD}
      - MONGO_PI_USERNAME=${MONGO_PI_USERNAME}
      - MONGO_PI_PASSWORD=${MONGO_PI_PASSWORD}
      - MONGO_PI_DATABASE=${MONGO_PI_DATABASE}

  mongo-express:
    image: ind3x/rpi-mongo-express
    container_name: mongo-express
    restart: always
    depends_on:
      - mongo
    networks:
      - mynetwork
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_OPTIONS_EDITORTHEME=${EDITORTHEME}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
      - ME_CONFIG_MONGO_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=${MONGO_INIT_DATABASE}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ADMIN_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ADMIN_PASSWORD}
      - ME_CONFIG_MONGODB_PORT=${MONGO_PORT}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_DOCKER_SERVICE_NAME}
      - TINI_SUBREAPER= 

  samba:
    image: trnape/rpi-samba
    container_name: samba
    entrypoint: "/run.sh"
    command: [ "-u","${SAMBA_USER}:${SAMBA_PASS}", "-s", "pi-files:/share/data/:rw:pi"]
    restart: always
    ports:
      - ${MONGO_HOSTNAME}:445:445
    networks:
      - mynetwork
    volumes:
      - iptv-volume:/share/data

  telegram:
    image: sivalives/telegram
    build:
      context: ../telegram
      dockerfile: Dockerfile
    container_name: telegram-bot
    environment:
      TELEGRAM_BOTFATHER_APIKEY: ${TELEGRAM_BOTFATHER_APIKEY}
      TELEGRAM_TELETHON_API_ID: ${TELEGRAM_TELETHON_API_ID}
      TELEGRAM_TELETHON_API_HASH: ${TELEGRAM_TELETHON_API_HASH}
      TELEGRAM_TELETHON_SESSION_NAME: ${TELEGRAM_TELETHON_SESSION_NAME}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      MONGO_HOSTNAME: ${MONGO_HOSTNAME}
      DROPBOX_APIKEY: ${DROPBOX_APIKEY}
      LIFX_APIKEY: ${LIFX_APIKEY}
      LIFX_BULB1_ID: ${LIFX_BULB1_ID}
      LIFX_BULB2_ID: ${LIFX_BULB2_ID}
    restart: always
    networks:
      - mynetwork
    volumes:
      - iptv-volume:/iptv-volume

  iptv:
    image: sivalives/iptv
    build:
      context: ../iptv
      dockerfile: Dockerfile
    container_name: iptv
    restart: always
    networks:
      - mynetwork
    volumes:
      - iptv-volume:/iptv-volume

  lifx:
    image: sivalives/lifx
    build:
      context: ../lifx-automation
      dockerfile: Dockerfile
    environment:
      DROPBOX_APIKEY: ${DROPBOX_APIKEY}
      LIFX_APIKEY: ${LIFX_APIKEY}
      LIFX_BULB1_ID: ${LIFX_BULB1_ID}
      LIFX_BULB2_ID: ${LIFX_BULB2_ID}
    container_name: lifx
    restart: always
    networks:
      - mynetwork

  flask:
    build:
      context: ../python-flask-mongo
      dockerfile: Dockerfile
    container_name: flask
    image: sivalives/python-flask-mongo
    restart: always
    environment:   
      APP_ENV: "prod"
      APP_DEBUG: "True"
      APP_PORT: 5000
      MONGO_PI_DATABASE: ${MONGO_PI_DATABASE}
      MONGO_PI_USERNAME: ${MONGO_PI_USERNAME}
      MONGO_PI_PASSWORD: ${MONGO_PI_PASSWORD}
      MONGO_HOSTNAME: ${MONGO_HOSTNAME}
      MONGO_PORT: ${MONGO_PORT}
    volumes:
      - python-flask-data:/var/www
    depends_on:
      - mongo
    networks:
      mynetwork:
        aliases:
          - flask-app
          

  nginx:
    image: nginx:1.15
    container_name: nginx
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - nginx-data:/var/www
      - ../nginx/conf.d/app.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - flask
    networks:
      - mynetwork
 
networks:
  mynetwork:
volumes:
  opt-splunk-etc:
  opt-splunk-var:
  iptv-volume:
  mongo-data:
  python-flask-data:
  nginx-data:
