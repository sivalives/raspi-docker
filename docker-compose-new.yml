version: '3.9'  # Use 3.9 or higher for health checks and conditions
services:
  spunk-uf:
    image: sivalives/splunk-uf
    tty: true
    container_name: splunk-uf
    restart: always
    build:
      context: ./splunkforwarder
      args:
        SPKPASS: ${SPKPASS} # From .env file
      dockerfile: Dockerfile
    ports:
      - 8089:8089
      - 9997:9997
    networks:
      - mynetwork
    volumes:
      - opt-splunk-etc:/opt/splunkforwarder/etc
      - opt-splunk-var:/opt/splunkforwarder/var
      - syslog-data:/syslog-data
      

  fish-feeder:
    build:
      context: ./fish-feeder
      dockerfile: Dockerfile
    container_name: fish-feeder
    image: sivalives/fish-feeder
    privileged: true
    restart: always
    volumes:
      - fish-feeder-data:/var/log
    networks:
      - mynetwork

  fish-lights:
    build:
      context: ./fish-lights
      dockerfile: Dockerfile
    container_name: fish-lights
    image: sivalives/fish-lights
    privileged: true
    restart: always
    volumes:
      - fish-lights-data:/var/log
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    hostname: "rabbit"
    ports:
      - "5672:5672" # RabbitMQ default messaging port
      - "15672:15672" # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq # RabbitMQ data storage
      - rabbitmq-config:/etc/rabbitmq # RabbitMQ configuration
      - ./rabbit-mq/rabbitmq-config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbit-mq/rabbitmq-config/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  rabbitmq-publisher:
    build:
      context: ./rabbit-mq/publisher
    container_name: rabbitmq-publisher
    restart: always
    ports:
      - "5000:5000"
    environment:
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - mynetwork

  telegram:
    image: sivalives/telegram
    build:
      context: ./telegram
      dockerfile: Dockerfile
    container_name: telegram-bot
    environment:
      TELEGRAM_BOTFATHER_APIKEY: ${TELEGRAM_BOTFATHER_APIKEY}
      TELEGRAM_TELETHON_API_ID: ${TELEGRAM_TELETHON_API_ID}
      TELEGRAM_TELETHON_API_HASH: ${TELEGRAM_TELETHON_API_HASH}
      TELEGRAM_TELETHON_SESSION_NAME: ${TELEGRAM_TELETHON_SESSION_NAME}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      MONGO_HOSTNAME: ${MONGO_HOSTNAME}
      DROPBOX_APP_KEY: ${DROPBOX_APP_KEY}
      DROPBOX_APP_SECRET: ${DROPBOX_APP_SECRET}
      DROPBOX_REFRESH_TOKEN: ${DROPBOX_REFRESH_TOKEN}
      LIFX_APIKEY: ${LIFX_APIKEY}
      LIFX_BULB1_ID: ${LIFX_BULB1_ID}
      LIFX_BULB2_ID: ${LIFX_BULB2_ID}
    restart: always
    networks:
      - mynetwork
    volumes:
      - iptv-volume:/iptv-volume
      - /var/run/docker.sock:/var/run/docker.sock  # Map Docker socket [used for running host level commands from container]
    stdin_open: true # Keep the STDIN open to interact with the container
    tty: true # Allocate a pseudo-TTY to run the container interactively

  syslog-ng:
    image: lscr.io/linuxserver/syslog-ng:latest
    container_name: syslog-ng
    environment:
      - PUID=1000             # User ID for permissions
      - PGID=1000             # Group ID for permissions
      - TZ=Etc/UTC            # Set the timezone
      - LOG_TO_STDOUT=false   # Disable logging to stdout to focus on file-based logs
    volumes:
      - ./syslog-ng/config/syslog-ng.conf:/config/syslog-ng.conf                # Path to syslog-ng configuration files
      - syslog-data:/var/syslog-ng/logs # Volume for storing logs
    ports:
      - 514:5514/udp
      - 601:6601/tcp
      - 6514:6514/tcp
    restart: unless-stopped
    privileged: true                    # Required for accessing /dev/log and /dev/kmsg

networks:
  mynetwork:

volumes:
  opt-splunk-etc:
  opt-splunk-var:
  fish-feeder-data:
  fish-lights-data:
  rabbitmq-data:
  rabbitmq-log:
  rabbitmq-config:
  iptv-volume:
  syslog-data:

